- @hide_top_links = true
- page_title _("To-Do List")
- header_title _("To-Do List"), dashboard_todos_path

= render_two_factor_auth_recovery_settings_check
= render_dashboard_ultimate_trial(current_user)
- add_page_specific_style 'page_bundles/todos'

.page-title-holder.d-flex.align-items-center
  %h1.page-title.gl-font-size-h-display= _("To-Do List")

- if current_user.todos.any?
  .top-area
    = gl_tabs_nav({ class: 'gl-flex-grow-1 gl-border-0' }) do
      = gl_tab_link_to todos_filter_path(state: 'pending'), item_active: params[:state].blank? || params[:state] == 'pending', class: "js-todos-pending" do
        = _("To Do")
        = gl_tab_counter_badge(number_with_delimiter(todos_pending_count), { class: 'js-todos-badge' })
      = gl_tab_link_to todos_filter_path(state: 'done'), item_active: params[:state] == 'done', class: "js-todos-done" do
        = _("Done")
        = gl_tab_counter_badge(number_with_delimiter(todos_done_count), { class: 'js-todos-badge' })

    .nav-controls
      - if @allowed_todos.any?(&:pending?)
        .gl-mr-3
          = link_to destroy_all_dashboard_todos_path(todos_filter_params), class: 'gl-button btn btn-default btn-loading align-items-center js-todos-mark-all', method: :delete, data: { href: destroy_all_dashboard_todos_path(todos_filter_params) } do
            = gl_loading_icon(inline: true)
            = s_("Todos|Mark all as done")
          = link_to bulk_restore_dashboard_todos_path, class: 'gl-button btn btn-default btn-loading align-items-center js-todos-undo-all hidden', method: :patch , data: { href: bulk_restore_dashboard_todos_path(todos_filter_params) } do
            = gl_loading_icon(inline: true)
            = s_("Todos|Undo mark all as done")

  .todos-filters
    .issues-details-filters.row-content-block.second-block
      = form_tag todos_filter_path(without: [:project_id, :author_id, :type, :action_id]), method: :get, class: 'filter-form gl-display-flex gl-flex-direction-column gl-sm-flex-direction-row' do
        .filter-categories.gl-display-flex.gl-flex-direction-column.gl-md-flex-direction-row.gl-flex-grow-1.gl-flex-wrap.gl-mx-n2
          .filter-item.gl-m-2
            - if params[:group_id].present?
              = hidden_field_tag(:group_id, params[:group_id])
            = dropdown_tag(group_dropdown_label(params[:group_id], _("Group")), options: { toggle_class: 'js-group-search js-filter-submit gl-xs-w-full!', title: s_("Todos|Filter by group"), filter: true, filterInput: 'input#group-search', dropdown_class: 'dropdown-menu-selectable dropdown-menu-group js-filter-submit', placeholder: _("Search groups"), data: { default_label: _("Group"), display: 'static' } })
          .filter-item.gl-m-2
            - if params[:project_id].present?
              = hidden_field_tag(:project_id, params[:project_id])
            = dropdown_tag(project_dropdown_label(params[:project_id], _("Project")), options: { toggle_class: 'js-project-search js-filter-submit gl-xs-w-full!', title: s_("Todos|Filter by project"), filter: true, filterInput: 'input#project-search', dropdown_class: 'dropdown-menu-selectable dropdown-menu-project js-filter-submit', placeholder: _("Search projects"), data: { default_label: _("Project"), display: 'static' } })
          .filter-item.gl-m-2
            - if params[:author_id].present?
              = hidden_field_tag(:author_id, params[:author_id])
            = dropdown_tag(user_dropdown_label(params[:author_id], _("Author")), options: { toggle_class: 'js-user-search js-filter-submit js-author-search gl-xs-w-full!', title: s_("Todos|Filter by author"), filter: true, filterInput: 'input#author-search', dropdown_class: 'dropdown-menu-user dropdown-menu-selectable dropdown-menu-author js-filter-submit', placeholder: _("Search authors"), data: { any_user: _("Any Author"), first_user: (current_user.username if current_user), project_id: (@project.id if @project), selected: params[:author_id], field_name: 'author_id', default_label: _("Author"), todo_filter: true, todo_state_filter: params[:state] || 'pending' } })
          .filter-item.gl-m-2
            - if params[:type].present?
              = hidden_field_tag(:type, params[:type])
            = dropdown_tag(todo_types_dropdown_label(params[:type], _("Type")), options: { toggle_class: 'js-type-search js-filter-submit gl-xs-w-full!', dropdown_class: 'dropdown-menu-selectable dropdown-menu-type js-filter-submit', data: { data: todo_types_options, default_label: _("Type") } })
          .filter-item.actions-filter.gl-m-2
            - if params[:action_id].present?
              = hidden_field_tag(:action_id, params[:action_id])
            = dropdown_tag(todo_actions_dropdown_label(params[:action_id], _("Action")), options: { toggle_class: 'js-action-search js-filter-submit gl-xs-w-full!', dropdown_class: 'dropdown-menu-selectable dropdown-menu-action js-filter-submit', data: { data: todo_actions_options, default_label: _("Action") } })
        .filter-item.sort-filter.gl-mt-3.gl-sm-mt-0.gl-mb-0.gl-sm-mb-0
          .dropdown
            %button.dropdown-menu-toggle.dropdown-menu-toggle-sort{ type: 'button', class: 'gl-xs-w-full!', 'data-toggle' => 'dropdown' }
              %span.light
              - if @sort.present?
                = sort_options_hash[@sort]
              - else
                = sort_title_recently_created
              = sprite_icon('chevron-down', css_class: 'dropdown-menu-toggle-icon gl-top-3')
            %ul.dropdown-menu.dropdown-menu-sort.dropdown-menu-right
              %li
                = link_to todos_filter_path(sort: sort_value_label_priority) do
                  = sort_title_label_priority
                = link_to todos_filter_path(sort: sort_value_recently_created) do
                  = sort_title_recently_created
                = link_to todos_filter_path(sort: sort_value_oldest_created) do
                  = sort_title_oldest_created
                = link_to todos_filter_path(sort: sort_value_recently_updated) do
                  = sort_title_recently_updated

.row.js-todos-all
  - if @allowed_todos.any?
    .col.js-todos-list-container{ data: { qa_selector: "todos_list_container" } }
      .js-todos-options{ data: { per_page: @allowed_todos.count, current_page: @todos.current_page, total_pages: @todos.total_pages } }
        %ul.content-list.todos-list
          = render @allowed_todos
      = paginate @todos, theme: "gitlab"
    .js-nothing-here-container.empty-state.hidden
      .svg-content
        = image_tag 'illustrations/todos_all_done.svg'
      .text-content.gl-text-center
        %h4
          = s_("Todos|You're all done!")
  - elsif current_user.todos.any?
    .col.todos-all-done.empty-state
      .svg-content.svg-250
        = image_tag 'illustrations/todos_all_done.svg'
      .text-content.gl-text-center
        - if todos_filter_empty?
          %h4
            = no_todos_messages.sample
          %p
            = (s_("Todos|Are you looking for things to do? Take a look at %{strongStart}%{openIssuesLinkStart}open issues%{openIssuesLinkEnd}%{strongEnd}, contribute to %{strongStart}%{mergeRequestLinkStart}a merge request%{mergeRequestLinkEnd}%{mergeRequestLinkEnd}%{strongEnd}, or mention someone in a comment to automatically assign them a new to-do item.") % { strongStart: '<strong>', strongEnd: '</strong>', openIssuesLinkStart: "<a href=\"#{issues_dashboard_path}\">", openIssuesLinkEnd: '</a>', mergeRequestLinkStart: "<a href=\"#{merge_requests_dashboard_path}\">", mergeRequestLinkEnd: '</a>' }).html_safe
        - else
          %h4
            = s_("Todos|Nothing is on your to-do list. Nice work!")
  - else
    .col.empty-state
      .svg-content
        = image_tag 'illustrations/todos_empty.svg'
      .text-content.gl-text-center
        %h4
          = s_("Todos|Your To-Do List shows what to work on next")
        %p
          = (s_("Todos|When an issue or merge request is assigned to you, or when you receive a %{strongStart}@mention%{strongEnd} in a comment, this automatically triggers a new item in your To-Do List.") % { strongStart: '<strong>', strongEnd: '</strong>' }).html_safe
        %p
          = s_("Todos|It's how you always know what to work on next.")
