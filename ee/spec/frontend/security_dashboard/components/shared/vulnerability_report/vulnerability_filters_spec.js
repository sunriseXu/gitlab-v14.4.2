import ActivityFilter from 'ee/security_dashboard/components/shared/filters/activity_filter.vue';
import ClusterFilter from 'ee/security_dashboard/components/shared/filters/cluster_filter.vue';
import VulnerabilityFilters from 'ee/security_dashboard/components/shared/vulnerability_report/vulnerability_filters.vue';
import ProjectFilter from 'ee/security_dashboard/components/shared/filters/project_filter.vue';
import ScannerFilter from 'ee/security_dashboard/components/shared/filters/scanner_filter.vue';
import SimpleFilter from 'ee/security_dashboard/components/shared/filters/simple_filter.vue';
import ToolFilter from 'ee/security_dashboard/components/shared/filters/tool_filter.vue';
import { shallowMountExtended } from 'helpers/vue_test_utils_helper';
import { FILTERS } from 'ee/security_dashboard/components/shared/vulnerability_report/constants';

const { ACTIVITY, CLUSTER, PROJECT, SEVERITY, STATUS, TOOL_SIMPLE, TOOL_VENDOR } = FILTERS;

describe('Vulnerability filters component', () => {
  let wrapper;

  const createWrapper = ({ filters, refactorVulnerabilityToolFilter = true }) => {
    wrapper = shallowMountExtended(VulnerabilityFilters, {
      propsData: { filters },
      provide: {
        glFeatures: {
          refactorVulnerabilityToolFilter,
        },
      },
    });
  };

  afterEach(() => {
    wrapper.destroy();
  });

  it('emits filters-changed event when filter is changed', () => {
    createWrapper({ filters: [STATUS] });
    const filter = wrapper.findComponent(SimpleFilter);
    const data = { a: 1 };
    filter.vm.$emit('filter-changed', data);

    expect(wrapper.emitted('filters-changed')[0][0]).toMatchObject(data);
  });

  it.each`
    name             | filters          | expectedComponent
    ${'activity'}    | ${[ACTIVITY]}    | ${ActivityFilter}
    ${'project'}     | ${[PROJECT]}     | ${ProjectFilter}
    ${'severity'}    | ${[SEVERITY]}    | ${SimpleFilter}
    ${'status'}      | ${[STATUS]}      | ${SimpleFilter}
    ${'tool_simple'} | ${[TOOL_SIMPLE]} | ${ToolFilter}
    ${'tool_vendor'} | ${[TOOL_VENDOR]} | ${ScannerFilter}
    ${'cluster'}     | ${[CLUSTER]}     | ${ClusterFilter}
  `(`shows the expected component for filter '$name'`, ({ filters, expectedComponent }) => {
    createWrapper({ filters });

    expect(wrapper.findComponent(expectedComponent).exists()).toBe(true);
  });

  describe('when the "refactorVulnerabilityToolFilter" feature flag is disabled', () => {
    it.each`
      name             | filters          | expectedComponent
      ${'tool_simple'} | ${[TOOL_SIMPLE]} | ${SimpleFilter}
    `(`shows the expected component for filter '$name'`, ({ filters, expectedComponent }) => {
      createWrapper({ filters, refactorVulnerabilityToolFilter: false });

      expect(wrapper.findComponent(expectedComponent).exists()).toBe(true);
    });
  });
});
