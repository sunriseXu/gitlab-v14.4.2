import { GlSprintf, GlLink } from '@gitlab/ui';
import { shallowMountExtended } from 'helpers/vue_test_utils_helper';
import Details from 'ee/security_dashboard/components/shared/vulnerability_details_graphql/index.vue';
import DetailsSection from 'ee/security_dashboard/components/shared/vulnerability_details_graphql/details_section.vue';
import DetailsSectionListItem from 'ee/security_dashboard/components/shared/vulnerability_details_graphql/details_section_list_item.vue';
import SeverityBadge from 'ee/vue_shared/security_reports/components/severity_badge.vue';

const TEST_VULNERABILITY = {
  description: `Bracket object notation with user input is present, this might allow an attacker to access all properties of the object and even it's prototype, leading to possible code execution.`,
  severity: 'HIGH',
  project: {
    name: 'Gitlab.com',
    webUrl: 'http://gitlab.com',
  },
};

describe('ee/security_dashboard/components/shared/vulnerability_details_graphql/index.vue', () => {
  let wrapper;

  const createComponent = () => {
    wrapper = shallowMountExtended(Details, {
      propsData: {
        ...TEST_VULNERABILITY,
      },
      stubs: {
        GlSprintf,
        DetailsSection,
        DetailsSectionListItem,
      },
    });
  };

  afterEach(() => {
    wrapper.destroy();
  });

  beforeEach(createComponent);

  describe('description section', () => {
    const findDescriptionSection = () => wrapper.findByTestId('description-section');

    it('is a details-section with the correct heading', () => {
      const descriptionSection = findDescriptionSection();

      expect(descriptionSection.is(DetailsSection)).toBe(true);
      expect(descriptionSection.props()).toMatchObject({
        heading: 'Description',
      });
    });

    it(`contains the vulnerability's description`, () => {
      expect(findDescriptionSection().text()).toContain(TEST_VULNERABILITY.description);
    });
  });

  it('renders the severity with a badge', () => {
    const severity = wrapper.findByTestId('severity-list-item');

    expect(severity.text()).toContain('Severity:');
    expect(severity.findComponent(SeverityBadge).exists()).toBe(true);
  });

  it('renders the project with a link to it', () => {
    const project = wrapper.findByTestId('project-list-item');

    expect(project.text()).toContain('Project:');
    expect(project.findComponent(GlLink).attributes('href')).toBe(
      TEST_VULNERABILITY.project.webUrl,
    );
  });
});
