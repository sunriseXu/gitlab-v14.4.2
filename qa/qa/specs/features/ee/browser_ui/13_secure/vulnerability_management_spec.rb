# frozen_string_literal: true

module QA
  RSpec.describe 'Secure', :runner do
    describe 'Security Reports in a Merge Request' do
      let(:sast_vuln_count) { 5 }
      let(:dependency_scan_vuln_count) { 4 }
      let(:container_scan_vuln_count) { 8 }
      let(:vuln_name) { "Regular Expression Denial of Service in debug" }
      let(:remediable_vuln_name) { "Authentication bypass via incorrect DOM traversal and canonicalization in saml2-js" }

      let!(:project) do
        Resource::Project.fabricate_via_api! do |p|
          p.name = 'project-with-secure'
          p.description = 'Project with Secure'
          p.auto_devops_enabled = false
          p.initialize_with_readme = true
        end
      end

      let!(:runner) do
        Resource::Runner.fabricate! do |runner|
          runner.project = project
          runner.name = "runner-for-#{project.name}"
          runner.tags = ['secure_report']
        end
      end

      let!(:source_repository) do
        Resource::Repository::ProjectPush.fabricate! do |push|
          push.project = project
          push.directory = Pathname
                             .new(__dir__)
                             .join('../../../../../ee/fixtures/secure_premade_reports')
          push.commit_message = 'Create Secure compatible application to serve premade reports'
          push.branch_name = 'secure-mr'
        end
      end

      let!(:merge_request) do
        Resource::MergeRequest.fabricate_via_api! do |mr|
          mr.project = project
          mr.source_branch = 'secure-mr'
          mr.target_branch = project.default_branch
          mr.source = source_repository
          mr.target = project.default_branch
          mr.target_new_branch = false
        end
      end

      before do
        Flow::Login.sign_in_unless_signed_in
        project.visit!
        Flow::Pipeline.wait_for_latest_pipeline(status: 'passed')
        merge_request.visit!
      end

      after do
        runner.remove_via_api!
      end

      it 'can dismiss a vulnerability with a reason', testcase: 'https://gitlab.com/gitlab-org/gitlab/-/quality/test_cases/348008' do
        dismiss_reason = "Vulnerability not applicable"

        Page::MergeRequest::Show.perform do |merge_request|
          expect(merge_request).to have_vulnerability_report
          merge_request.dismiss_vulnerability_with_reason(vuln_name, dismiss_reason)
          merge_request.click_vulnerability(vuln_name)

          expect(merge_request).to have_opened_dismissed_vulnerability(dismiss_reason)

          merge_request.cancel_vulnerability_modal
        end

        merge_request.merge_via_api!

        expect { project.pipelines.size }.to eventually_eq(2).within(max_duration: 60),
                                             "There are currently #{project.pipelines.size} pipelines in the project instead of 2"

        Support::Waiter.wait_until(sleep_interval: 3) do
          latest_pipeline_status == 'success'
        end
        Page::Project::Menu.perform(&:click_on_vulnerability_report)

        EE::Page::Project::Secure::Show.perform do |security_dashboard|
          security_dashboard.filter_by_status(['dismissed'])

          expect(security_dashboard).to have_status('dismissed', vuln_name)
        end
      end

      def latest_pipeline_status
        Resource::Pipeline.fabricate_via_api! do |pipeline|
          pipeline.project = project
          pipeline.id = project.pipelines.first[:id]
        end.status
      end

      it 'can create an issue from a vulnerability', testcase: 'https://gitlab.com/gitlab-org/gitlab/-/quality/test_cases/348007' do
        Page::MergeRequest::Show.perform do |merge_request|
          expect(merge_request).to have_vulnerability_report
          merge_request.create_vulnerability_issue(vuln_name)
        end

        Page::Project::Issue::Show.perform do |issue|
          expect(issue).to have_title("Investigate vulnerability: #{vuln_name}")
        end
      end

      it 'can create an auto-remediation MR', testcase: 'https://gitlab.com/gitlab-org/gitlab/-/quality/test_cases/348009' do
        Page::MergeRequest::Show.perform do |merge_request|
          expect(merge_request).to have_vulnerability_report
          merge_request.resolve_vulnerability_with_mr remediable_vuln_name

          # Context changes as resolve method creates new MR
          expect(merge_request).to have_title remediable_vuln_name
        end
      end
    end
  end
end
