# frozen_string_literal: true

require 'spec_helper'

RSpec.describe GitlabSchema.types['VulnerabilityScanner'] do
  let_it_be(:group) { create(:group) }
  let_it_be(:project) { create(:project, namespace: group) }
  let_it_be(:user) { create(:user) }

  let(:fields) do
    %i[id name external_id vendor report_type report_type_humanized]
  end

  before do
    stub_licensed_features(security_dashboard: true)

    project.add_developer(user)
  end

  subject { GitlabSchema.execute(query, context: { current_user: user }).as_json }

  it { expect(described_class).to have_graphql_fields(fields) }
  it { expect(described_class).to require_graphql_authorizations(:read_vulnerability_scanner) }

  describe 'report_type_humanized' do
    let_it_be(:scanner_dependency_scanning) { create(:vulnerabilities_scanner, project: project) }
    let_it_be(:scanner_dast) { create(:vulnerabilities_scanner, project: project) }
    let_it_be(:scanner_sast) { create(:vulnerabilities_scanner, project: project) }
    let_it_be(:scanner_fuzzing) { create(:vulnerabilities_scanner, project: project) }
    let_it_be(:finding_dependency_scanning) do
      create(:vulnerabilities_finding, report_type: :dependency_scanning, scanner: scanner_dependency_scanning)
    end

    let_it_be(:finding_dast) { create(:vulnerabilities_finding, report_type: :sast, scanner: scanner_dast) }
    let_it_be(:finding_sast) { create(:vulnerabilities_finding, report_type: :dast, scanner: scanner_sast) }
    let_it_be(:finding_fuzzing) do
      create(:vulnerabilities_finding, report_type: :api_fuzzing, scanner: scanner_fuzzing)
    end

    let(:query) do
      %(
        query {
          project(fullPath: "#{project.full_path}") {
            vulnerabilityScanners {
              nodes {
                reportTypeHumanized
              }
            }
          }
        }
      )
    end

    it 'returns a humanized version of the report type' do
      nodes = subject.dig('data', 'project', 'vulnerabilityScanners', 'nodes')

      expect(nodes.map { |node| node['reportTypeHumanized'] }).to eq(
        ["Dependency Scanning", "SAST", "DAST", "API Fuzzing"]
      )
    end
  end
end
