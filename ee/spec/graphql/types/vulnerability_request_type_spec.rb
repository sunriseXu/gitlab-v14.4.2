# frozen_string_literal: true

require 'spec_helper'

RSpec.describe GitlabSchema.types['VulnerabilityRequest'] do
  let_it_be(:project) { create(:project) }
  let_it_be(:user) { create(:user) }
  let_it_be(:pipeline) { create(:ee_ci_pipeline, :with_api_fuzzing_report, project: project) }

  before do
    stub_licensed_features(api_fuzzing: true, security_dashboard: true)

    project.add_developer(user)
  end

  let(:fields) do
    %i[body method url headers]
  end

  subject { GitlabSchema.execute(query, context: { current_user: user }).as_json }

  specify { expect(described_class.graphql_name).to eq('VulnerabilityRequest') }

  it { expect(described_class).to have_graphql_fields(fields) }

  describe 'checking field contents' do
    before do
      vulnerabilities = subject.dig('data', 'project', 'pipeline', 'securityReportFindings', 'nodes')
      @vulnerability = vulnerabilities.find { |v| v['title'] == "CORS misconfiguration at 'http://127.0.0.1:7777/api/users'" }
    end

    context 'evidence.request fields' do
      let(:query) do
        %(
        query {
          project(fullPath: "#{project.full_path}") {
            pipeline(iid: "#{pipeline.iid}") {
              securityReportFindings {
                nodes {
                  title
                  evidence {
                    request {
                      body
                      method
                      url
                      headers {
                        name
                        value
                      }
                    }
                  }
                }
              }
            }
          }
        }
      )
      end

      it 'checks the contents of the fields' do
        request = @vulnerability['evidence']['request']

        expect(request['headers'].first).to eq({ 'name' => 'Host', 'value' => '127.0.0.1:7777' })
        expect(request['method']).to eq('GET')
        expect(request['url']).to eq('http://127.0.0.1:7777/api/users')
        expect(request['body']).to be_empty
      end
    end

    context 'evidence.supportingMessages[].request fields' do
      let(:query) do
        %(
        query {
          project(fullPath: "#{project.full_path}") {
            pipeline(iid: "#{pipeline.iid}") {
              securityReportFindings {
                nodes {
                  title
                  evidence {
                    supportingMessages {
                      name
                      request {
                        method
                        url
                        body
                        headers {
                          name
                          value
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      )
      end

      it 'checks the contents of the fields' do
        request = @vulnerability['evidence']['supportingMessages'].find { |m| m['name'] == 'Recorded' }['request']

        expect(request['headers'].first).to eq({
                                                 "name" => "Host",
                                                 "value" => "127.0.0.1:7777"
                                               })

        expect(request['method']).to eq('GET')
        expect(request['url']).to eq('http://127.0.0.1:7777/api/users')
      end
    end
  end
end
